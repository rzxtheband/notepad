SELECT t.table_name
FROM INFORMATION_SCHEMA.tables t
INNER JOIN INFORMATION_SCHEMA.columns c ON c.table_schema = t.table_schema AND c.table_name = t.table_name
WHERE t.table_type = 'BASE TABLE' AND c.column_name = 'your_column_name'
ORDER BY t.table_name;


-- Users table to store information about users
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (email)
);

-- Workflow table to store information about workflows
CREATE TABLE workflows (
    workflow_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- Steps table to define the steps within a workflow
CREATE TABLE steps (
    step_id INT PRIMARY KEY AUTO_INCREMENT,
    workflow_id INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    sequence INT NOT NULL,
    FOREIGN KEY (workflow_id) REFERENCES workflows(workflow_id)
);

-- Tasks table to store tasks related to each step in a workflow
CREATE TABLE tasks (
    task_id INT PRIMARY KEY AUTO_INCREMENT,
    step_id INT NOT NULL,
    description TEXT,
    due_date TIMESTAMP,
    assigned_to INT,
    completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (step_id) REFERENCES steps(step_id),
    FOREIGN KEY (assigned_to) REFERENCES users(user_id)
);

-- Business rules table to store JSON rules for each workflow step
CREATE TABLE business_rules (
    rule_id INT PRIMARY KEY AUTO_INCREMENT,
    step_id INT NOT NULL,
    rule_json JSON NOT NULL,
    FOREIGN KEY (step_id) REFERENCES steps(step_id)
);

routes:
User Management:

POST /api/users/register: Register a new user.
POST /api/users/login: Log in a user.
GET /api/users/profile: Get user profile information.
PUT /api/users/profile: Update user profile information.
POST /api/users/logout: Log out the current user.
Workflow Management:

GET /api/workflows: Get a list of all workflows.
GET /api/workflows/{workflow_id}: Get details of a specific workflow.
POST /api/workflows: Create a new workflow.
PUT /api/workflows/{workflow_id}: Update an existing workflow.
DELETE /api/workflows/{workflow_id}: Delete a workflow.
Step Management:

GET /api/workflows/{workflow_id}/steps: Get all steps in a workflow.
GET /api/workflows/{workflow_id}/steps/{step_id}: Get details of a specific step.
POST /api/workflows/{workflow_id}/steps: Create a new step in a workflow.
PUT /api/workflows/{workflow_id}/steps/{step_id}: Update an existing step.
DELETE /api/workflows/{workflow_id}/steps/{step_id}: Delete a step.
Task Management:

GET /api/workflows/{workflow_id}/steps/{step_id}/tasks: Get all tasks in a step.
GET /api/workflows/{workflow_id}/steps/{step_id}/tasks/{task_id}: Get details of a specific task.
POST /api/workflows/{workflow_id}/steps/{step_id}/tasks: Create a new task in a step.
PUT /api/workflows/{workflow_id}/steps/{step_id}/tasks/{task_id}: Update an existing task.
DELETE /api/workflows/{workflow_id}/steps/{step_id}/tasks/{task_id}: Delete a task.
Business Rules Management:

GET /api/workflows/{workflow_id}/steps/{step_id}/rules: Get all business rules for a step.
GET /api/workflows/{workflow_id}/steps/{step_id}/rules/{rule_id}: Get details of a specific business rule.
POST /api/workflows/{workflow_id}/steps/{step_id}/rules: Create a new business rule for a step.
PUT /api/workflows/{workflow_id}/steps/{step_id}/rules/{rule_id}: Update an existing business rule.
DELETE /api/workflows/{workflow_id}/steps/{step_id}/rules/{rule_id}: Delete a business rule.
